# Generated by Django 4.0.4 on 2022-08-31 13:53

import core.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Morador',
            fields=[
                ('criados', models.DateField(auto_now_add=True, verbose_name='Criação')),
                ('modificado', models.DateField(auto_now=True, verbose_name='Atualização')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo?')),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('idade', models.IntegerField(verbose_name='Idade')),
                ('endereco', models.CharField(max_length=200, verbose_name='Endereço')),
                ('data', models.DateField(auto_now_add=True, verbose_name='Data de Criação')),
                ('sexo', models.CharField(choices=[('H', 'Homem'), ('M', 'Mulher')], max_length=10)),
            ],
            options={
                'verbose_name': 'Morador',
                'verbose_name_plural': 'Moradores',
            },
        ),
        migrations.CreateModel(
            name='FichaRegistros',
            fields=[
                ('criados', models.DateField(auto_now_add=True, verbose_name='Criação')),
                ('modificado', models.DateField(auto_now=True, verbose_name='Atualização')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo?')),
                ('id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.morador', verbose_name='Morador')),
                ('naturalidade', models.CharField(max_length=200, verbose_name='Naturalidade')),
                ('descricao', models.CharField(max_length=500, verbose_name='Se não for de campos.../Quando veio??/Por que?')),
                ('tempRua', models.IntegerField(verbose_name='Tempo de Rua')),
                ('porque', models.CharField(max_length=400, verbose_name='O Por quê de esta na rua')),
                ('residen', models.CharField(choices=[('C', 'Casa'), ('R', 'Rua')], max_length=10)),
                ('local', models.CharField(max_length=200, verbose_name='Local onde dorme')),
                ('documento', models.BooleanField(default=False, verbose_name='Possui documento?')),
                ('documentos', models.CharField(choices=[('CTPS', 'CTPS'), ('IDENTIDADE', 'IDENTIDADE'), ('TITULO', 'TITULO ELEITOR'), ('CPF', 'CPF'), ('HABILITACAO', 'HABILITAÇÃO'), ('RESERVISTA', 'CERTIFICADO DE RESERVISTA')], default='CPF', max_length=50)),
                ('familia', models.BooleanField(default=False, verbose_name='Possui família?')),
                ('ondeFami', models.CharField(max_length=200, verbose_name='Onde mora?')),
                ('composta', models.CharField(choices=[('Pais', 'Pais'), ('Irmãos', 'Irmãos'), ('Cônjuge', 'Cônjuge'), ('Filhos', 'Filhos'), ('Outros', 'Outros')], max_length=20)),
                ('outrosFami', models.CharField(max_length=100, verbose_name='outros')),
                ('vacinado', models.BooleanField(default=False, verbose_name='Vacinado?')),
                ('vacinas', models.CharField(choices=[('COVID', 'COVID'), ('INFLUENZA', 'INFLUENZA'), ('Outras', 'Outras')], max_length=20)),
                ('dose', models.CharField(choices=[('1ºD', '1dose'), ('2ºD', '2dose'), ('3ºD', '3dose')], max_length=10)),
                ('outrosVacina', models.CharField(max_length=100, verbose_name='Outras')),
                ('dependente', models.BooleanField(default=False, verbose_name='Depentente químico?')),
                ('drogas', models.CharField(choices=[('Álcool', 'Álcool'), ('Cocaína', 'Cocaína'), ('Crack', 'Crack'), ('Maconha', 'Maconha')], default='Álcool', max_length=10)),
                ('outraDroga', models.CharField(max_length=100, verbose_name='Outra')),
                ('tratamento', models.BooleanField(default=False, verbose_name='Fez ou faz tratemento?')),
                ('ondeTrata', models.CharField(max_length=200, verbose_name='Onde?')),
                ('doenca', models.BooleanField(default=False, verbose_name='Tem enfermidade ou doença crônica?')),
                ('qualDoenca', models.CharField(max_length=200, verbose_name='Qual?')),
                ('tratamentoDoenca', models.BooleanField(default=False, verbose_name='Faz ou Fez tratamento?')),
                ('ondeTratamento', models.CharField(max_length=100, verbose_name='Onde?')),
                ('crenca', models.BooleanField(default=False, verbose_name='Possui alguma crença?')),
                ('religiosidade', models.CharField(choices=[('Católica', 'Católica'), ('Evangélica', 'Evangélica'), ('Espirita', 'Espirita'), ('Umbanda', 'Umbanda'), ('Nenhuma', 'Nenhuma')], max_length=20)),
                ('profissao', models.BooleanField(default=False, verbose_name='Possui alguma Profissão?')),
                ('qualProfi', models.CharField(max_length=100, verbose_name='Qual?')),
                ('trabalha', models.BooleanField(default=False, verbose_name='Trabalha atualmente?')),
                ('emque', models.CharField(max_length=200, verbose_name='Em que?')),
                ('trabalhou', models.BooleanField(default=False, verbose_name='Já trabalhou?')),
                ('doque', models.CharField(max_length=200, verbose_name='Trabalhou em que?')),
                ('aprender', models.CharField(max_length=100, verbose_name='O que gostaria de aprender?')),
                ('alfabetisado', models.BooleanField(default=False, verbose_name='Alfabetizado?')),
                ('grau', models.CharField(choices=[('Fundaemental,Incompleto', 'Fun/Inc'), ('Fundamental,Completo', 'Fun/Com'), ('Médio,Incompleto', 'Médio/Inc'), ('Médio,Completo', 'Médio/Com'), ('Profissionalizante', 'Profissionalizante')], max_length=30)),
                ('profissionalizante', models.CharField(max_length=100, verbose_name='Qual Curso Profissionalizante?')),
            ],
            options={
                'verbose_name': 'FichaRegistro',
                'verbose_name_plural': 'FichasRegistro',
            },
        ),
        migrations.CreateModel(
            name='CustomUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('is_staff', models.BooleanField(default=True, verbose_name='Membro da equipe')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', core.models.UsuarioManager()),
            ],
        ),
    ]
